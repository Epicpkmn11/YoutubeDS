.section .itcm
.include "mpeg4_header.s"

.global mpeg4_VideoObjectPlane
mpeg4_VideoObjectPlane:
	push {r4-r11,lr}
	ldr r1, [r0, #mpeg4_dec_struct__pData]	//r0 = pData
	//Setup the bitreader
	@r2 = bits left - 16, r3 = bitreg
	ldrb r3, [r1], #1
	ldrb r12, [r1], #1
	orr r3, r12, r3, lsl #8
	mov r3, r3, lsl #16
	mov r2, #0
	//Read frame type (0 = I, 1 = P, 2 = B (not supported)), 2 bits
	mov r4, r3, lsr #30	//r4 = frametype
	mov r3, r3, lsl #2
	sub r2, #2
	bl mpeg4_BitReader_FillBits
mpeg4_VideoObjectPlane_modulo_time_base_loop:
		adds r3, r3
		sub r2, #1
		bcs mpeg4_VideoObjectPlane_modulo_time_base_loop	//while bit == 1
	cmp r2, #0
		bllt mpeg4_BitReader_FillBits
	//skip vop_time_increment and 2 marker bits
	ldrb r12, [r0, #mpeg4_dec_struct__vop_time_increment_bits]
	add r12, #2
	mov r3, r3, lsl r12
	subs r2, r12
		blmi mpeg4_BitReader_FillBits

	adds r3, r3
		bcc mpeg4_VideoObjectPlane_end	//vob is not coded
	subs r2, #1
		blmi mpeg4_BitReader_FillBits

	cmp r4, #1
		mov r5, r3, lsr #31
		strb r5, [r0, #mpeg4_dec_struct__vop_rounding_control]
		addeq r3, r3	//vop_rounding_type, doesn't seem to be used yet
		subeq r2, #1
	mov r3, r3, lsl #3 //intra_dc_vlc_thr, not really used yet. Is it even used for simple profile???????
	subs r2, #3
		blmi mpeg4_BitReader_FillBits
	mov r5, r3, lsr #27	//qscale
	mov r3, r3, lsl #5
	sub r2, #5
	cmp r4, #0	//not an I frame?
		movne r12, r3, lsr #29
		strneb r12, [r0, #mpeg4_dec_struct__vop_fcode_forward]
		movne r3, r3, lsl #3
		subne r2, #3
	cmp r2, #0
		blmi mpeg4_BitReader_FillBits
	//motion_shape_texture->combined_motion_shape_texture
	mov r8, #0	//pixel offset
	ldrh r6, [r0, #mpeg4_dec_struct__height]
mpeg4_VideoObjectPlane_y_loop:
		push {r6}
		ldrh r6, [r0, #mpeg4_dec_struct__width]
mpeg4_VideoObjectPlane_x_loop:
			push {r6}
			bl mpeg4_macroblock
			//resync marker shit:
			cmp r2, #0
				blmi mpeg4_BitReader_FillBits
			cmp r2, #8
				ldrltb r12, [r1], #1
				rsblt lr, r2, #8
				orrlt r3, r12, lsl lr
				addlt r2, #8
			and r6, r2, #7
			mov r12, r3, lsl r6
			mov r11, #17
			cmp r4, #1
				ldreqb r11, [r0, #mpeg4_dec_struct__vop_fcode_forward]
				addeq r11, #16
			rsb r11, r11, #32
			mov r6, r12, lsr r11//#15
			cmp r6, #1
				beq mpeg4_video_packet_header
mpeg4_VideoObjectPlane_x_loop_cont:
			pop {r6}
			add r8, #16
			subs r6, #16
			bgt mpeg4_VideoObjectPlane_x_loop
		ldrh r6, [r0, #mpeg4_dec_struct__width]
		add r8, #(STRIDE << 4)	//stride * 16
		sub r8, r6
		pop {r6}
		subs r6, #16
		bgt mpeg4_VideoObjectPlane_y_loop
mpeg4_VideoObjectPlane_end:
	add r2, #16
	sub r1, r2, lsr #3
	str r1, [r0, #mpeg4_dec_struct__pData]
	pop {r4-r11,pc}

mpeg4_video_packet_header:
	pop {r6}
	pop {r6}
	b mpeg4_VideoObjectPlane_end

	mov r3, r12
	bic r2, #7
	rsb r11, r11, #32
	mov r3, r3, lsl r11//#17
	subs r2, r11//#17
	cmp r2, #0
		blmi mpeg4_BitReader_FillBits
	//macroblock number, length of 7 only applies to 176x144 videos
	mov r3, r3, lsl #7
	subs r2, #7
		blmi mpeg4_BitReader_FillBits
	mov r5, r3, lsr #27	//qscale
	mov r3, r3, lsl #5
	subs r2, #5
		blmi mpeg4_BitReader_FillBits
	ldr r12, [r0, #mpeg4_dec_struct__pdc_coef_cache_y]
	mov r11, #1024
	mov lr, #576
mpeg4_video_packet_header_loop1:
	strh r11, [r12], #2
	subs lr, #1
	bne mpeg4_video_packet_header_loop1
	ldr r12, [r0, #mpeg4_dec_struct__pdc_coef_cache_uv]
	mov lr, #288
mpeg4_video_packet_header_loop2:
	strh r11, [r12], #2
	subs lr, #1
	bne mpeg4_video_packet_header_loop2
	mov r11, #0
	ldr r12, [r0, #mpeg4_dec_struct__pvector_cache]
	mov lr, #1152
mpeg4_video_packet_header_loop3:
	strh r11, [r12], #2
	subs lr, #1
	bne mpeg4_video_packet_header_loop3

	adds r3, r3
	sub r2, #1
		bcc mpeg4_VideoObjectPlane_x_loop_cont
	mov r11, r11
	b mpeg4_VideoObjectPlane_x_loop_cont

.align 4

mpeg4_macroblock_notcoded_finish:
	//Set DC coef to 1024 in the cache
@	ldr lr, [r0, #mpeg4_dec_struct__pdc_coef_cache_y]
	//get x and y
@	mov r11, r8, lsr #STRIDE_SHIFT		//y
@	sub r12, r8, r11, lsl #STRIDE_SHIFT	//x

	//divide by 8
@	mov r11, r11, lsr #3
@	mov r12, r12, lsr #3
	//create new offset
@	add lr, r11, lsl #6
@	add lr, r12, lsl #1
@	mov r10, #1024
@	strh r10, [lr]
@	strh r10, [lr, #1]
@	strh r10, [lr, #(STRIDE >> 3)]
@	strh r10, [lr, #((STRIDE >> 3) + 1)]

@	ldr lr, [r0, #mpeg4_dec_struct__pdc_coef_cache_uv]
@	mov r10, r8, lsr #1
@	mov r11, r10, lsr #STRIDE_SHIFT			//y
@	sub r12, r10, r11, lsl #STRIDE_SHIFT	//x
@	mov r11, r11, lsr #3
@	mov r12, r12, lsr #3
@	add lr, r11, lsl #6
@	add lr, r12, lsl #1
@	mov r10, #1024
@	strh r10, [lr]
@	strh r10, [lr, #(STRIDE >> 4)]
	//Copy block from previous frame to this frame
	push {r2, r3}
	mov r3, #16
	ldr lr, [r0, #mpeg4_dec_struct__pPrevY]
	ldr r12, [r0, #mpeg4_dec_struct__pDstY]
	add lr, r8
	add r12, r8
mpeg4_macroblock_notcoded_finish_copyloop_y:
	ldmia lr, {r2, r9, r10, r11}
	stmia r12, {r2, r9, r10, r11}
	add lr, #STRIDE
	add r12, #STRIDE
	subs r3, #1
	bne mpeg4_macroblock_notcoded_finish_copyloop_y

	mov r3, #8
	ldr lr, [r0, #mpeg4_dec_struct__pPrevUV]
	ldr r12, [r0, #mpeg4_dec_struct__pDstUV]
	add lr, r8, lsr #1
	add r12, r8, lsr #1
	add r10, lr, #(STRIDE >> 1)
	add r11, r12, #(STRIDE >> 1)
mpeg4_macroblock_notcoded_finish_copyloop_uv:
	ldmia lr, {r2, r9}
	stmia r12, {r2, r9}
	ldmia r10, {r2, r9}
	stmia r11, {r2, r9}
	add lr, #STRIDE
	add r12, #STRIDE
	add r10, #STRIDE
	add r11, #STRIDE
	subs r3, #1
	bne mpeg4_macroblock_notcoded_finish_copyloop_uv

	pop {r2, r3}
	pop {pc}

mpeg4_macroblock:
	push {lr}
	@ push {r2,r3}
	@ ldr lr, [r0, #mpeg4_dec_struct__pvector_cache]
	@ //get x and y
	@ mov r2, r8, lsr #STRIDE_SHIFT		//y
	@ sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	@ //divide by 8
	@ mov r2, r2, lsr #3
	@ mov r3, r3, lsr #3
	@ //create new offset
	@ add lr, r2, lsl #(STRIDE_SHIFT - 1)
	@ add lr, r3, lsl #2

	@ ldr r2,= 0 //0x40004000
	@ str r2, [lr]
	@ str r2, [lr, #4]
	@ str r2, [lr, #(STRIDE >> 1)]
	@ str r2, [lr, #((STRIDE >> 1) + 4)]
	@ pop {r2, r3}

	cmp r2, #0
		blmi mpeg4_BitReader_FillBits
	cmn r4, #0
		subne r2, #1
		addnes r3, r3
		bcs mpeg4_macroblock_notcoded_finish	//return if block is not coded
	cmp r4, #0
		ldreq r12,= mpeg4_table_b6_vlc
		ldrne r12,= mpeg4_table_b7_vlc
	mov r11, r3, lsr #23
	ldrb r11, [r12, r11]
		ldreq r12,= mpeg4_table_b6_length
		ldrne r12,= mpeg4_table_b7_length
	ldrb r12, [r12, r11]
	mov r3, r3, lsl r12
	subs r2, r12
		blmi mpeg4_BitReader_FillBits
	mov r7, r11, lsr #2	//r7 = derived_mb_type
	cmp r7, #3
	cmpne r7, #4
		//moveq r12, r3, lsr #31
		//orreq r11, r11, r12, lsl #6
		addeq r3, r3 //ac_pred_flag, doesn't seem to be used for simple profile
		subeq r2, #1
	cmp r7, #7	//stuffing
		popeq {pc}	//return
	ldr r12,= mpeg4_table_b8_vlc
	mov r10, r3, lsr #26
	ldrb r10, [r12, r10]
	ldr r12,= mpeg4_table_b8_length
	ldrb r12, [r12, r10]
	mov r3, r3, lsl r12
	subs r2, r12
		blmi mpeg4_BitReader_FillBits
	cmp r7, #3
	cmpne r7, #4
		eorne r10, #0xF
	orr r6, r10, r11, lsl #4	//r6 = xxxx Pxxx xxuv abcd
	cmp r7, #1
	cmpne r7, #4
	bne mpeg4_macroblock_delta_cont
mpeg4_macroblock_delta:
	ldr r12,= mpeg4_table_qdelta
	mov r11, r3, lsr #30
	mov r3, r3, lsl #2
	sub r2, #2
	ldrsb r11, [r12, r11]
	add r5, r11	//apply delta
mpeg4_macroblock_delta_cont:
	cmp r7, #0
	cmpne r7, #1
	cmpeq r4, #1
	bne mpeg4_macroblock_16x16_predict_cont
mpeg4_macroblock_16x16_predict:
	bl mpeg4_motion_vector_forward
	//Calculate Px, Py
	push {r1-r7}
	push {r9-r12}
	ldr r1, [r0, #mpeg4_dec_struct__pvector_cache]
	ldrh r7, [r0, #mpeg4_dec_struct__width]
	sub r7, #16
	//get x and y
	mov r2, r8, lsr #STRIDE_SHIFT		//y
	sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	add r1, r2, lsl #(STRIDE_SHIFT - 1)
	add r1, r3, lsl #2

	push {r0}
	//mov r0, #0

	cmp r3, #0
	moveq r4, #0x4000
	//moveq r4, #0
	//moveq r10, #0
	//addeq r0, #1
	ldrnesh r4, [r1, #-4]			//dx
	ldrnesh r10, [r1, #(-4 + 2)]	//dy

	cmp r2, #0
	moveq r5, #0x4000
	//moveq r11, #0
	//addeq r0, #1
	subne r1, #(STRIDE >> 1)
	ldrnesh r5, [r1] //, #-(STRIDE >> 1)]
	ldrnesh r11, [r1, #2] //, #(-(STRIDE >> 1) + 2)]
	addne r1, #(STRIDE >> 1)
	cmpne r3, r7, lsr #3
	moveq r6, #0x4000//#0
	//moveq r12, #0
	//addeq r0, #1
	ldrnesh r6, [r1, #(-(STRIDE >> 1) + 8)]
	ldrnesh r12, [r1, #((-(STRIDE >> 1) + 8) + 2)]

	mov r0, #0
	mov r2, #0

	cmp r4, #0x4000
	moveq r4, #0
	moveq r10, #0
	orreq r0, #1
	addeq r2, #1

	cmp r5, #0x4000
	moveq r5, #0
	moveq r11, #0
	orreq r0, #2
	addeq r2, #1

	cmp r6, #0x4000
	moveq r6, #0
	moveq r12, #0
	orreq r0, #4
	addeq r2, #1

	cmp r2, #2
	bne 1f

	tst r0, #1
	moveq r5, r4
	moveq r11, r10
	moveq r6, r4
	moveq r12, r10
	beq 1f
	tst r0, #2
	moveq r4, r5
	moveq r10, r11
	moveq r6, r5
	moveq r12, r11
	beq 1f
	mov r4, r6
	mov r10, r12
	mov r5, r6
	mov r11, r12

	@ cmp r0, #2
	@ bne 1f
	@ cmp r3, #0
	@ movne r5, r4
	@ movne r11, r10
	@ movne r6, r4
	@ movne r12, r10
	@ bne 1f
	@ cmp r2, #0
	@ movne r4, r5
	@ movne r10, r11
	@ movne r6, r5
	@ movne r12, r11
	@ bne 1f
	@ mov r4, r6
	@ mov r10, r12
	@ mov r5, r6
	@ mov r11, r12
1:
	pop {r0}
	//calculate the median of the 3 values for dx
	@median = max(min(a,b), min(max(a,b),c));
	//min(a,b)
	mov r9, r4
	cmp r4, r5
	movgt r9, r5
	//max(a,b)
	mov lr, r4
	movlt lr, r5
	//min(max(a,b),c)
	mov r4, lr
	cmp lr, r6
	movgt r4, r6
	//max(min(a,b), min(max(a,b),c))
	cmp r9, r4
	movgt r4, r9
	//r4 is px now
	//calculate the median of the 3 values for dy
	mov r9, r10
	cmp r10, r11
	movgt r9, r11
	mov lr, r10
	movlt lr, r11
	mov r5, lr
	cmp lr, r12
	movgt r5, r12
	cmp r9, r5
	movgt r5, r9
	//r5 is py now
	pop {r9-r12} //get the other arguments back
	push {r1}
	//Let's decode the vector
	bl mpeg4_motion_vector_decode
	//r11 = dx, r12 = dy
	//Store dx and dy in the cache
	pop {r1}
	strh r11, [r1]
	strh r12, [r1, #2]
	strh r11, [r1, #4]
	strh r12, [r1, #(4 + 2)]
	add r1, #(STRIDE >> 1)
	strh r11, [r1]//, #(STRIDE >> 1)]
	strh r12, [r1, #2] //, #((STRIDE >> 1) + 2)]
	strh r11, [r1, #4] //, #((STRIDE >> 1) + 4)]
	strh r12, [r1, #(4 + 2)] //#((STRIDE >> 1) + 4 + 2)]
	sub r1, #(STRIDE >> 1)
	push {r11, r12}
	//We need to copy the block now
	bl mpeg4_blockcopy_16x16
	pop {r11, r12}
	tst r11, #3
	bic r11, #3
	mov r11, r11, asr #1
	addne r11, #1
	tst r12, #3
	bic r12, #3
	mov r12, r12, asr #1
	addne r12, #1
	push {r8, r11, r12}
	mov r8, r8, lsr #1
	bl mpeg4_blockcopy_8x8_UV
	pop {r8, r11, r12}
	push {r8}
	mov r8, r8, lsr #1
	add r8, #(STRIDE >> 1)
	bl mpeg4_blockcopy_8x8_UV
	pop {r8}
	pop {r1-r7}
mpeg4_macroblock_16x16_predict_cont:
	cmp r7, #2
	bne mpeg4_macroblock_8x8_predict_cont
mpeg4_macroblock_8x8_predict:
//First Block
	bl mpeg4_motion_vector_forward
	//Calculate Px, Py
	push {r1-r7}
	push {r9-r12}
	ldr r1, [r0, #mpeg4_dec_struct__pvector_cache]
	ldrh r7, [r0, #mpeg4_dec_struct__width]
	sub r7, #16
	//get x and y
	mov r2, r8, lsr #STRIDE_SHIFT		//y
	sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	add r1, r2, lsl #(STRIDE_SHIFT - 1)
	add r1, r3, lsl #2

	push {r0}
	mov r0, #0

	cmp r3, #0
	moveq r4, #0
	moveq r10, #0
	addeq r0, #1
	ldrnesh r4, [r1, #-4]			//dx
	ldrnesh r10, [r1, #(-4 + 2)]	//dy
	cmp r2, #0
	moveq r5, #0
	moveq r11, #0
	addeq r0, #1
	subne r1, #(STRIDE >> 1)
	ldrnesh r5, [r1] //, #-(STRIDE >> 1)]
	ldrnesh r11, [r1, #2]//, #(-(STRIDE >> 1) + 2)]
	addne r1, #(STRIDE >> 1)
	cmpne r3, r7, lsr #3
	moveq r6, #0
	moveq r12, #0
	addeq r0, #1
	ldrnesh r6, [r1, #(-(STRIDE >> 1) + 8)]
	ldrnesh r12, [r1, #((-(STRIDE >> 1) + 8) + 2)]

	cmp r0, #2
	bne 1f
	cmp r3, #0
	movne r5, r4
	movne r11, r10
	movne r6, r4
	movne r12, r10
	bne 1f
	cmp r2, #0
	movne r4, r5
	movne r10, r11
	movne r6, r5
	movne r12, r11
	bne 1f
	mov r4, r6
	mov r10, r12
	mov r5, r6
	mov r11, r12
1:
	pop {r0}
	//calculate the median of the 3 values for dx
	@median = max(min(a,b), min(max(a,b),c));
	//min(a,b)
	mov r9, r4
	cmp r4, r5
	movgt r9, r5
	//max(a,b)
	mov lr, r4
	movlt lr, r5
	//min(max(a,b),c)
	mov r4, lr
	cmp lr, r6
	movgt r4, r6
	//max(min(a,b), min(max(a,b),c))
	cmp r9, r4
	movgt r4, r9
	//r4 is px now
	//calculate the median of the 3 values for dy
	mov r9, r10
	cmp r10, r11
	movgt r9, r11
	mov lr, r10
	movlt lr, r11
	mov r5, lr
	cmp lr, r12
	movgt r5, r12
	cmp r9, r5
	movgt r5, r9
	//r5 is py now
	pop {r9-r12} //get the other arguments back
	push {r1}
	//Let's decode the vector
	bl mpeg4_motion_vector_decode
	//r11 = dx, r12 = dy
	//Store dx and dy in the cache
	pop {r1}
	strh r11, [r1]
	strh r12, [r1, #2]
	push {r11, r12}
	//We need to copy the block now
	bl mpeg4_blockcopy_8x8_Y
	pop {r11, r12}
	pop {r1-r7}
	push {r11, r12}
//Second Block
	bl mpeg4_motion_vector_forward
	//Calculate Px, Py
	push {r1-r7}
	push {r9-r12}
	ldr r1, [r0, #mpeg4_dec_struct__pvector_cache]
	ldrh r7, [r0, #mpeg4_dec_struct__width]
	sub r7, #8
	//get x and y
	mov r2, r8, lsr #STRIDE_SHIFT		//y
	sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	add r3, #8
	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	add r1, r2, lsl #(STRIDE_SHIFT - 1)
	add r1, r3, lsl #2

	push {r0}
	mov r0, #0

	ldrsh r4, [r1, #-4]			//dx
	ldrsh r10, [r1, #(-4 + 2)]	//dy
	cmp r2, #0
	moveq r5, #0
	moveq r11, #0
	addeq r0, #1
	subne r1, #(STRIDE >> 1)
	ldrnesh r5, [r1]//, #-(STRIDE >> 1)]
	ldrnesh r11, [r1, #2]//, #(-(STRIDE >> 1) + 2)]
	addne r1, #(STRIDE >> 1)
	cmpne r3, r7, lsr #3
	moveq r6, #0
	moveq r12, #0
	addeq r0, #1
	ldrnesh r6, [r1, #(-(STRIDE >> 1) + 4)]
	ldrnesh r12, [r1, #((-(STRIDE >> 1) + 4) + 2)]

	cmp r0, #2
	bne 1f
	mov r5, r4
	mov r11, r10
	mov r6, r4
	mov r12, r10
1:
	pop {r0}
	//calculate the median of the 3 values for dx
	@median = max(min(a,b), min(max(a,b),c));
	//min(a,b)
	mov r9, r4
	cmp r4, r5
	movgt r9, r5
	//max(a,b)
	mov lr, r4
	movlt lr, r5
	//min(max(a,b),c)
	mov r4, lr
	cmp lr, r6
	movgt r4, r6
	//max(min(a,b), min(max(a,b),c))
	cmp r9, r4
	movgt r4, r9
	//r4 is px now
	//calculate the median of the 3 values for dy
	mov r9, r10
	cmp r10, r11
	movgt r9, r11
	mov lr, r10
	movlt lr, r11
	mov r5, lr
	cmp lr, r12
	movgt r5, r12
	cmp r9, r5
	movgt r5, r9
	//r5 is py now
	pop {r9-r12} //get the other arguments back
	push {r1}
	//Let's decode the vector
	bl mpeg4_motion_vector_decode
	//r11 = dx, r12 = dy
	//Store dx and dy in the cache
	pop {r1}
	strh r11, [r1]
	strh r12, [r1, #2]
	//We need to copy the block now
	push {r11, r12}
	add r8, #8
	bl mpeg4_blockcopy_8x8_Y
	sub r8, #8
	pop {r11, r12}
	pop {r1-r7}
	pop {r10, lr}
	add r11, r10
	add r12, lr
	push {r11, r12}
//Third block
	bl mpeg4_motion_vector_forward
	//Calculate Px, Py
	push {r1-r7}
	push {r9-r12}
	ldr r1, [r0, #mpeg4_dec_struct__pvector_cache]
	ldrh r7, [r0, #mpeg4_dec_struct__width]
	sub r7, #8
	//get x and y
	mov r2, r8, lsr #STRIDE_SHIFT		//y
	sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	add r2, #8
	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	add r1, r2, lsl #(STRIDE_SHIFT - 1)
	add r1, r3, lsl #2

	cmp r3, #0
	moveq r4, #0
	moveq r10, #0
	ldrnesh r4, [r1, #-4]			//dx
	ldrnesh r10, [r1, #(-4 + 2)]	//dy
	sub r1, #(STRIDE >> 1)
	ldrsh r5, [r1]//, #-(STRIDE >> 1)]
	ldrsh r11, [r1, #2]//, #(-(STRIDE >> 1) + 2)]
	ldrsh r6, [r1, #(-(STRIDE >> 1) + 4)]
	ldrsh r12, [r1, #((-(STRIDE >> 1) + 4) + 2)]

	//calculate the median of the 3 values for dx
	@median = max(min(a,b), min(max(a,b),c));
	//min(a,b)
	mov r9, r4
	cmp r4, r5
	movgt r9, r5
	//max(a,b)
	mov lr, r4
	movlt lr, r5
	//min(max(a,b),c)
	mov r4, lr
	cmp lr, r6
	movgt r4, r6
	//max(min(a,b), min(max(a,b),c))
	cmp r9, r4
	movgt r4, r9
	//r4 is px now
	//calculate the median of the 3 values for dy
	mov r9, r10
	cmp r10, r11
	movgt r9, r11
	mov lr, r10
	movlt lr, r11
	mov r5, lr
	cmp lr, r12
	movgt r5, r12
	cmp r9, r5
	movgt r5, r9
	//r5 is py now
	pop {r9-r12} //get the other arguments back
	push {r1}
	//Let's decode the vector
	bl mpeg4_motion_vector_decode
	//r11 = dx, r12 = dy
	//Store dx and dy in the cache
	pop {r1}
	strh r11, [r1]
	strh r12, [r1, #2]
	//We need to copy the block now
	push {r11, r12}
	add r8, #(STRIDE << 3)
	bl mpeg4_blockcopy_8x8_Y
	sub r8, #(STRIDE << 3)
	pop {r11, r12}
	pop {r1-r7}
	pop {r10, lr}
	add r11, r10
	add r12, lr
	push {r11, r12}
//Fourth block
	bl mpeg4_motion_vector_forward
	//Calculate Px, Py
	push {r1-r7}
	push {r9-r12}
	ldr r1, [r0, #mpeg4_dec_struct__pvector_cache]
	ldrh r7, [r0, #mpeg4_dec_struct__width]
	sub r7, #8
	//get x and y
	mov r2, r8, lsr #STRIDE_SHIFT		//y
	sub r3, r8, r2, lsl #STRIDE_SHIFT	//x
	add r2, #8
	add r3, #8
	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	add r1, r2, lsl #(STRIDE_SHIFT - 1)
	add r1, r3, lsl #2

	ldrsh r4, [r1, #-4]			//dx
	ldrsh r10, [r1, #(-4 + 2)]	//dy
	sub r1, #(STRIDE >> 1)
	ldrsh r5, [r1]//, #-(STRIDE >> 1)]
	ldrsh r11, [r1, #2]//, #(-(STRIDE >> 1) + 2)]
	ldrsh r6, [r1, #-4] //, #(-(STRIDE >> 1) - 4)]
	ldrsh r12, [r1, #(-4 + 2)] //#((-(STRIDE >> 1) - 4) + 2)]
	add r1, #(STRIDE >> 1)
	//calculate the median of the 3 values for dx
	@median = max(min(a,b), min(max(a,b),c));
	//min(a,b)
	mov r9, r4
	cmp r4, r5
	movgt r9, r5
	//max(a,b)
	mov lr, r4
	movlt lr, r5
	//min(max(a,b),c)
	mov r4, lr
	cmp lr, r6
	movgt r4, r6
	//max(min(a,b), min(max(a,b),c))
	cmp r9, r4
	movgt r4, r9
	//r4 is px now
	//calculate the median of the 3 values for dy
	mov r9, r10
	cmp r10, r11
	movgt r9, r11
	mov lr, r10
	movlt lr, r11
	mov r5, lr
	cmp lr, r12
	movgt r5, r12
	cmp r9, r5
	movgt r5, r9
	//r5 is py now
	pop {r9-r12} //get the other arguments back
	push {r1}
	//Let's decode the vector
	bl mpeg4_motion_vector_decode
	//r11 = dx, r12 = dy
	//Store dx and dy in the cache
	pop {r1}
	strh r11, [r1]
	strh r12, [r1, #2]
	push {r11, r12}
	//We need to copy the block now
	ldr r1,= ((STRIDE << 3) + 8)
	add r8, r1
	bl mpeg4_blockcopy_8x8_Y
	ldr r1,= ((STRIDE << 3) + 8)
	sub r8, r1
	pop {r11, r12}
	pop {r1-r7}
	pop {r10, lr}
	add r11, r10
	add r12, lr
	and lr, r11, #0xF
	bic r11, #0xF
	mov r11, r11, asr #3
	cmp lr, #3
	addge r11, #1
	cmp lr, #14
	addge r11, #1 //#2

	and lr, r12, #0xF
	bic r12, #0xF
	mov r12, r12, asr #3
	cmp lr, #3
	addge r12, #1
	cmp lr, #14
	addge r12, #1

	//mov r12, r12, asr #3
	//addne r12, #1
	push {r8, r11, r12}
	mov r8, r8, lsr #1
	bl mpeg4_blockcopy_8x8_UV
	pop {r8, r11, r12}
	push {r8}
	mov r8, r8, lsr #1
	add r8, #(STRIDE >> 1)
	bl mpeg4_blockcopy_8x8_UV
	pop {r8}
mpeg4_macroblock_8x8_predict_cont:
	mov r9, r8
	mov r10, #0
	bl mpeg4_block
	add r9, #8
	add r10, #1
	bl mpeg4_block
	sub r9, #8
	add r9, #(STRIDE << 3)
	add r10, #1
	bl mpeg4_block
	add r9, #8
	add r10, #1
	bl mpeg4_block
	mov r9, r8, lsr #1
	add r10, #1
	bl mpeg4_block
	add r9, #(STRIDE >> 1)
	add r10, #1
	bl mpeg4_block
	pop {pc}

.pool

mpeg4_table_b12_vlc:
	.byte    0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x3F, 0x1, 0x3E, 0x3E, 0x2, 0x2, 0x3D, 0x3D, 0x3, 0x3
	.byte    0x3C, 0x3C, 0x4, 0x4, 0x3B, 0x3B, 0x5, 0x5, 0x3A, 0x3A, 0x6, 0x6, 0x39, 0x39, 0x7, 0x7
	.byte    0x38, 0x38, 0x38, 0x38, 0x8, 0x8, 0x8, 0x8, 0x37, 0x37, 0x37, 0x37, 0x9, 0x9, 0x9, 0x9
	.byte    0x36, 0x36, 0x36, 0x36, 0xA, 0xA, 0xA, 0xA, 0x35, 0x35, 0x35, 0x35, 0xB, 0xB, 0xB, 0xB
	.byte    0x34, 0x34, 0x34, 0x34, 0xC, 0xC, 0xC, 0xC, 0x33, 0x33, 0x33, 0x33, 0xD, 0xD, 0xD, 0xD
	.byte    0x32, 0x32, 0x32, 0x32, 0xE, 0xE, 0xE, 0xE, 0x31, 0x31, 0x31, 0x31, 0xF, 0xF, 0xF, 0xF
	.byte    0x30, 0x30, 0x30, 0x30, 0x10, 0x10, 0x10, 0x10, 0x2F, 0x2F, 0x2F, 0x2F, 0x11, 0x11, 0x11, 0x11
	.byte    0x2E, 0x2E, 0x2E, 0x2E, 0x12, 0x12, 0x12, 0x12, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x13, 0x13, 0x13
	.byte    0x2C, 0x2C, 0x2C, 0x2C, 0x14, 0x14, 0x14, 0x14, 0x2B, 0x2B, 0x2B, 0x2B, 0x15, 0x15, 0x15, 0x15
	.byte    0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16
	.byte    0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17
	.byte    0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
	.byte    0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27
	.byte    0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27
	.byte    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19
	.byte    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19
	.byte    0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26
	.byte    0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26
	.byte    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A
	.byte    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A
	.byte    0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25
	.byte    0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25
	.byte    0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B
	.byte    0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B
	.byte    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24
	.byte    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24
	.byte    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24
	.byte    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24
	.byte    0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
	.byte    0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
	.byte    0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
	.byte    0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	.byte    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20

mpeg4_table_b12_length:
	.byte 13, 13, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11
    .byte 11, 11, 11, 11, 11, 11, 10, 10, 10, 8, 8, 8, 7, 5, 4, 3
    .byte 1, 3, 4, 5, 7, 8, 8, 8, 10, 10, 10, 11, 11, 11, 11, 11
    .byte 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13
    .byte 13

.align 4

mpeg4_motion_vector_forward:
	push {lr}
	ldr r11,= mpeg4_table_b12_vlc
	ldr r12,= mpeg4_table_b12_length
	ldrb r9, [r11, r3, lsr #19]
	ldrb lr, [r12, r9]
	mov r3, r3, lsl lr
	subs r2, lr
		blmi mpeg4_BitReader_FillBits
	mov r10, #0
	subs r9, #32
		ldrneb lr, [r0, #mpeg4_dec_struct__vop_fcode_forward]
		subnes lr, #1
		rsbne r10, lr, #32
		movne r10, r3, lsr r10
		movne r3, r3, lsl lr
		subne r2, lr
	cmp r2, #0
		blmi mpeg4_BitReader_FillBits
	push {r9, r10}
	ldrb r9, [r11, r3, lsr #19]
	ldrb lr, [r12, r9]
	mov r3, r3, lsl lr
	subs r2, lr
		blmi mpeg4_BitReader_FillBits
	mov r10, #0
	subs r9, #32
		ldrneb lr, [r0, #mpeg4_dec_struct__vop_fcode_forward]
		subnes lr, #1
		rsbne r10, lr, #32
		movne r10, r3, lsr r10
		movne r3, r3, lsl lr
		subne r2, lr
	cmp r2, #0
		blmi mpeg4_BitReader_FillBits
	pop {r11, r12}
	//r9 = vertical_mv_data
	//r10 = vertical_mv_residual
	//r11 = horizontal_mv_data
	//r12 = horizontal_mv_residual
	pop {pc}

.pool

@r4 = Px, r5 = Py, r9 = vertical_mv_data, r10 = vertical_mv_residual, r11 = horizontal_mv_data, r12 = horizontal_mv_residual
//r1,r2,r3,r6,r7 and lr can be used safely
//returns r11, r12
mpeg4_motion_vector_decode:
	push {lr}
	ldrb lr, [r0, #mpeg4_dec_struct__vop_fcode_forward]
	sub lr, #1			//r_size
	mov r2, #1
	mov r1, r2, lsl lr	//f
	mov r2, r1, lsl #5
	sub r3, r2, #1		//high
	rsb r6, r2, #0		//low
	mov r2, r2, lsl #1	//range
	cmp r1, #1
	cmpne r11, #0
	beq mpeg4_motion_vector_decode_cont
	movs r7, r11
	rsbmi r7, r7, #0
	sub r7, #1
	add r7, r12, r7, lsl lr
	add r11, r7, #1
	rsbmi r11, r11, #0
mpeg4_motion_vector_decode_cont:
	cmp r1, #1
	cmpne r9, #0
	beq mpeg4_motion_vector_decode_cont2
	movs r7, r9
	rsbmi r7, r7, #0
	sub r7, #1
	add r7, r10, r7, lsl lr
	add r9, r7, #1
	rsbmi r9, r9, #0
mpeg4_motion_vector_decode_cont2:
	add r11, r4
	cmp r11, r6
		addlt r11, r2
	cmp r11, r3
		subgt r11, r2
	add r12, r9, r5
	cmp r12, r6
		addlt r12, r2
	cmp r12, r3
		subgt r12, r2
	pop {pc}

mpeg4_block:
	push {lr}
	cmp r7, #3
	cmpne r7, #4
		bne mpeg4_block_read_dct
	cmp r10, #4
		bge mpeg4_block_predict_dc_uv
mpeg4_block_predict_dc_y:
	ldr r12,= mpeg4_table_b13_vlc
	mov r11, r3, lsr #21
	ldrb r11, [r12, r11]//dct_dc_size_luminance
	ldr r12,= mpeg4_table_b13_length
	b mpeg4_block_predict_dc_yuv
mpeg4_block_predict_dc_uv:
	ldr r12,= mpeg4_table_b14_vlc
	mov r11, r3, lsr #20
	ldrb r11, [r12, r11]//dct_dc_size_chrominance
	ldr r12,= mpeg4_table_b14_length
mpeg4_block_predict_dc_yuv:
	ldrb r12, [r12, r11]
	mov r3, r3, lsl r12
	subs r2, r12
		blmi mpeg4_BitReader_FillBits
	mov r12, #0
	cmp r11, #0
		beq mpeg4_block_predict_dc_yuv_residu_cont
	adds r3, r3
	mov lr, #1
	subcs r11, #1
	mov lr, lr, lsl r11
	rsbcc lr, lr, #0
	addcc lr, #1
	addcs r11, #1
	rsb r12, r11, #33
	add r12, lr, r3, lsr r12
	subs r2, r11
	sub r11, #1
	mov r3, r3, lsl r11
		blmi mpeg4_BitReader_FillBits
	cmp r11, #(8 - 1)
	addgt r3, r3
	subgt r2, #1
mpeg4_block_predict_dc_yuv_residu_cont:
	bl mpeg4_PredictDCCoef
mpeg4_block_read_dct:
	//push registers and allocate dct space
	push {r4, r5, r6, r7, r8, r9, r10}
	//push {r9, r10}
	cmp r10, #4
	movge lr, #((1 << 5) << 4)
	movlt lr, #(1 << 3)
	mov lr, lr, lsr r10
	and lr, lr, r6
	cmp r7, #3
	cmpne r7, #4
	//sub sp, #(64 << 2)	//dct
	//str r5, [sp, #-(4 + (64 << 2))]
	//push {r5}
	push {r5}
	//push {r5, r6, r9, r10, r11}
	ldr r4,= mpeg4_dct_tmp
	movne r12, #0
	mov r12, r12, lsl #16
	mov r12, r12, lsr #16
	str r12, [r4], #4 //store dc coef
	mov r5, #0
	mov r6, #0
	mov r7, #0
	mov r8, #0
	mov r9, #0
	mov r10, #0
	mov r11, #0
	mov r12, #0
	stmia r4!, {r5-r11}
	stmia r4!, {r5-r12}
	stmia r4!, {r5-r12}
	stmia r4!, {r5-r12}

	moveq r4, #1
	movne r4, #0
	//carry out ac prediction if needed
	//pop {r5, r6, r9, r10, r11}
	//push {lr}
	//tst r6, #(1 << 10)
	//	blne mpeg4_PredictACCoef
	//pop {lr}
	pop {r10}
	cmp lr, #0
		beq mpeg4_block_finish	//no ac co�fficients coded
mpeg4_block_read_dct_init:
	//tst r6, #(1 << 10)
	//	ldreq r5,= mpeg4_dezigzag_table
	//	beq mpeg4_block_read_dct_init_cont
	//cmp r11, #0
	//	ldreq r5,= mpeg4_deav_table
	//	ldrne r5,= mpeg4_deah_table
// mpeg4_block_read_dct_init_cont:
	cmp r4, #0	//0 = inter mode, 1 = intra mode
	ldr r5,= mpeg4_dezigzag_table
	add r4, r5
	ldreq r5, [r0, #mpeg4_dec_struct__pInterDCTVLCTable]
	ldrne r5, [r0, #mpeg4_dec_struct__pIntraDCTVLCTable]
mpeg4_block_read_dct_loop:
		mov r6, r3, lsr #25
		cmp r6, #3
			beq mpeg4_block_decode_escape
		mov r6, r3, lsr #(20 - 1) //read one bit more, so it's multiplied by 2
		ldrh r6, [r5, r6]	//because the lower bit is ignored, a one there does not give any problems :)
		and r7, r6, #0xF	//nr bits
		mov r6, r6, lsr #4
		and r8, r6, #0x1F	//value
		mov r6, r6, lsr #5
		and r9, r6, #0x3F	//skip
		mov r6, r6, lsr #6	//last
		movs r3, r3, lsl r7
		rsbcs r8, r8, #0
		subs r2, r7
			blmi mpeg4_BitReader_FillBits
mpeg4_block_read_dct_loop_cont:
		ldrb r9, [r4, r9]!
		add r4, #1
		cmp r8, #0
		beq mpeg4_block_read_dct_loop_cont2
		rsbmi r8, r8, #0	//absolute value
		mov r12, r8, lsl #1
		mla r8, r12, r10, r10
		and r12, r10, #1
		eor r12, #1
		sub r8, r12
		rsbmi r8, r8, #0
mpeg4_block_read_dct_loop_cont2:
		ldr r12,= -2048
		cmp r8, r12
		movlt r8, r12
		ldr r12,= 2047
		cmp r8, r12
		movgt r8, r12
		ldr r12,= mpeg4_dct_tmp
		//ldr r9, [r12, r9, lsl #2]!
		//add r8, r9
		//str r8, [r12]
		//str r8, [sp, r9, lsl #2]
		add r12, r9, lsl #1
		strh r8, [r12]
		cmp r6, #1
			bne mpeg4_block_read_dct_loop

mpeg4_block_finish:
	pop {r4, r5, r6, r7, r8, r9, r10}
	push {r0-r3}
	ldr r2,= mpeg4_dct_tmp
	cmp r10, #4
		ldrlt r0, [r0, #mpeg4_dec_struct__pDstY]
		ldrge r0, [r0, #mpeg4_dec_struct__pDstUV]
	add r0, r9
	mov r1, #STRIDE

	cmp r7, #3
	cmpne r7, #4
	beq 1f
	bl EXTERN_ASMff_simple_idct_add_armv5te
	pop {r0-r3, pc}
1:
	bl EXTERN_ASMff_simple_idct_put_armv5te
	pop {r0-r3, pc}

mpeg4_block_decode_escape:
	movs r3, r3, lsl #8
	bcs mpeg4_block_decode_escape_cont
mpeg4_block_decode_escape_1:
	subs r2, #8
		blmi mpeg4_BitReader_FillBits
	mov r6, r3, lsr #(20 - 1) //read one bit more, so it's multiplied by 2
	ldrh r6, [r5, r6]	//because the lower bit is ignored, a one there does not give any problems :)
	and r7, r6, #0xF	//nr bits
	mov r6, r6, lsr #4
	and r8, r6, #0x1F	//value
	mov r6, r6, lsr #5
	add r9, r5, #0x2000
	ldrb r9, [r9, r6]
	add r8, r9
	and r9, r6, #0x3F	//skip
	mov r6, r6, lsr #6	//last
	movs r3, r3, lsl r7
	rsbcs r8, r8, #0
	subs r2, r7
		blmi mpeg4_BitReader_FillBits
	b mpeg4_block_read_dct_loop_cont
mpeg4_block_decode_escape_cont:
	adds r3, r3
	bcs mpeg4_block_decode_escape_3
mpeg4_block_decode_escape_2:
	subs r2, #9
		blmi mpeg4_BitReader_FillBits
	mov r6, r3, lsr #(20 - 1) //read one bit more, so it's multiplied by 2
	ldrh r6, [r5, r6]	//because the lower bit is ignored, a one there does not give any problems :)
	and r7, r6, #0xF	//nr bits
	mov r6, r6, lsr #4
	and r8, r6, #0x1F	//value
	mov r6, r6, lsr #5
	and r9, r6, #0x3F	//skip
	mov r6, r6, lsr #6	//last
	add r12, r5, #0x2080
	add r12, r8
	ldrb r12, [r12, r6, lsl #5]
	add r9, r12
	movs r3, r3, lsl r7
	rsbcs r8, r8, #0
	subs r2, r7
		blmi mpeg4_BitReader_FillBits
	b mpeg4_block_read_dct_loop_cont
mpeg4_block_decode_escape_3:
	subs r2, #9
		blmi mpeg4_BitReader_FillBits
	mov r6, r3, lsr #31
	add r3, r3
	mov r9, r3, lsr #26
	mov r3, r3, lsl #6
	subs r2, #7
		blmi mpeg4_BitReader_FillBits
	add r3, r3
	mov r8, r3, asr #20
	mov r3, r3, lsl #(12 + 1)
	subs r2, #(1 + 12 + 1)
		blmi mpeg4_BitReader_FillBits
	b mpeg4_block_read_dct_loop_cont

@r10 = i
@r12 = coefresidu
mpeg4_PredictDCCoef:
REG_DIV_NUMER = 0x04000290
	push {r1-r9, lr}
	cmp r10, #4
	ldrlt r1, [r0, #mpeg4_dec_struct__pdc_coef_cache_y]
	ldrge r1, [r0, #mpeg4_dec_struct__pdc_coef_cache_uv]
	//get x and y
	mov r2, r9, lsr #STRIDE_SHIFT		//y
	sub r3, r9, r2, lsl #STRIDE_SHIFT	//x

	//divide by 8
	mov r2, r2, lsr #3
	mov r3, r3, lsr #3
	//create new offset
	//add r9, r1, r2, lsl #6
	add r9, r1, r2, lsl #(STRIDE_SHIFT - 2)

	ldrlt r1,= mpeg4_y_dc_scale_table
	ldrge r1,= mpeg4_c_dc_scale_table
	ldrb r1, [r1, r5]

	add r9, r3, lsl #1
	cmp r10, #5
		subeq r3, #(STRIDE >> 4)	//remove v offset for zero calculations
	//get a, b and c
	cmp r3, #0
	//a
	moveq r4, #1024
	ldrnesh r4, [r9, #-2]
	//b
	cmpne r2, #0
	moveq r5, #1024
	ldrnesh r5, [r9, #(-(STRIDE >> 2) - 2)]
	//c
	cmp r2, #0
	moveq r6, #1024
	ldrnesh r6, [r9, #(-(STRIDE >> 2))]
	//get differences
	subs r7, r4, r5
	rsbmi r7, r7, #0
	subs r8, r5, r6
	rsbmi r8, r8, #0
	cmp r7, r8
	movlt r4, r6
	mov r11, #0	//block a = 0, c = 1
	movlt r11, #1
	add r4, r1, lsr #1
	ldr r5,= REG_DIV_NUMER
	str r4, [r5]
	str r1, [r5, #8]
	mov r6, #(1 << 15)
	str r6, [r5, #-0x10]//DIVCNT
mpeg4_PredictDCCoef_divloop:
	ldr r6, [r5, #-0x10]
	tst r6, #(1 << 15)
	bne mpeg4_PredictDCCoef_divloop
	ldr r6, [r5, #0x10]
	add r12, r6
	mul r12, r1, r12
	ldr r1,= -2048
	cmp r12, r1
	movlt r12, r1
	ldr r1,= 2047
	cmp r12, r1
	movgt r12, r1
	strh r12, [r9]
	pop {r1-r9, pc}

// r11: 0 = a, 1 = c
@ mpeg4_PredictACCoef:
@ 	push {r1-r4,r6,r11,lr}
@ 	mov r2, r9, lsr #STRIDE_SHIFT		//y
@ 	sub r3, r9, r2, lsl #STRIDE_SHIFT	//x
@ 	cmp r10, #5
@ 		subeq r3, #(STRIDE >> 4)	//remove v offset for zero calculations

@ 	cmp r11, #0
@ 	cmpeq r3, #0
@ 		popeq {r1-r4,r6,r11,pc}	//return when out of bounds (assumed to be all 0)
@ 	cmp r11, #1
@ 	cmpeq r2, #0
@ 		popeq {r1-r4,r6,r11,pc}	//return when out of bounds (assumed to be all 0)

@ 	cmp r10, #4
@ 	ldrlt r1, [r0, #mpeg4_dec_struct__pdctCacheY]
@ 	ldrge r1, [r0, #mpeg4_dec_struct__pdctCacheUV]
@ 	cmp r11, #0
@ 	subeq r3, #8
@ 	subne r2, #8
@ 	add r9, r1, r2, lsl #(5 + STRIDE_SHIFT - 3)
@ 	ldr r10,= mpeg4_invq
@ 	ldr r10, [r10, r5, lsl #2]
@ 	//load qscale of block
@ 	ldr r5, [r9], #4
@ 	ldr r4,= mpeg4_dct_tmp
@ 	cmp r11, #1
@ 		beq mpeg4_PredictACCoef_c
@ mpeg4_PredictACCoef_a:
@ 	add r9, #(7 << 1)
@ 	add r4, #(8 << 2)
@ 	mov r6, #7
@ mpeg4_PredictACCoef_a_loop:
@ 		ldrsh r8, [r9], #2
@ 		mul r8, r5, r8
@ 		smull r8, lr, r10, r8
@ 		mov r8, r8, lsr #16
@ 		orr r8, r8, lr, lsl #16
@ 		str r8, [r4], #(8 << 2)
@ 		subs r6, #1
@ 		bne mpeg4_PredictACCoef_a_loop
@ 	b mpeg4_PredictACCoef_end
@ mpeg4_PredictACCoef_c:
@ 	add r4, #4
@ 	mov r6, #7
@ mpeg4_PredictACCoef_c_loop:
@ 		ldrsh r8, [r9], #2
@ 		mul r8, r5, r8
@ 		smull r8, lr, r10, r8
@ 		mov r8, r8, lsr #16
@ 		orr r8, r8, lr, lsl #16
@ 		str r8, [r4], #4
@ 		subs r6, #1
@ 		bne mpeg4_PredictACCoef_c_loop
@ mpeg4_PredictACCoef_end:
@ 	pop {r1-r4,r6,r11,pc}

mpeg4_BitReader_FillBits:
	push {r12, lr}
	ldrb r12, [r1], #1
	rsb lr, r2, #8 //#0x10
	orr r3, r12, lsl lr
	ldrb r12, [r1], #1
	add r2, #16
	sub lr, #8
	orr r3, r12, lsl lr
	pop {r12, pc}